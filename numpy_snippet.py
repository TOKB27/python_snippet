### 数値計算や行列演算に使われるNumpy ###

import numpy as np

# ベクトル定義
a = np.array([1, 2, 3])

# shape属性
print('Shape:', a.shape)
# Shape: (3,)

# 次元数
print('Rank:', a.ndim)
# Rank: 1

# サイズ（要素数）
print('Size:', a.size)
# Size: 3


# 行列の定義
b = np.array(
    [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9],
     [10, 11, 12]]
)

print('Shape:', b.shape)
print('Rank:', b.ndim)
print('Size:', b.size)
# Shape: (4, 3)
# Rank: 2
# Size: 12


# 形を指定して、要素が全て 1 で埋められた ndarray を作る
c = np.ones((3, 2))
print(c)
# [[1. 1.]
#  [1. 1.]
#  [1. 1.]]

# 形と値を指定して、要素が指定した値で埋められた ndarray を作る
d = np.full((3, 2), 7)
print(d)
# [[7 7]
#  [7 7]
#  [7 7]]

# 指定された大きさの単位行列を表す ndarray を作る
e = np.eye(5)
print(e)
# [[1. 0. 0. 0. 0.]
#  [0. 1. 0. 0. 0.]
#  [0. 0. 1. 0. 0.]
#  [0. 0. 0. 1. 0.]
#  [0. 0. 0. 0. 1.]]

# 形を指定して、 0 ~ 1 の間の乱数で要素を埋めた ndarray を作る
f = np.random.random((3, 4))
print(f)
# [[0.82170515 0.66039148 0.336626   0.20265204]
#  [0.33051185 0.99460445 0.95882645 0.39158158]
#  [0.36289287 0.94868407 0.19453077 0.67940572]]

# 3 から始まり 6 になるまで 1 ずつ増加する数列を作る（6 は含まない）
g = np.arange(3, 6, 1)
print(g)
# [3 4 5]

# 要素の取り出し
h = np.array(
    [[0, 1, 2, 3],
     [4, 5, 6, 7],
     [8, 9, 10, 11]]
)

val = h[0, 1]  # 1行2列目の値を取り出す
print(val)
# 1

# スライスによる要素の選択
slice_h = h[1:2, 1:3]
print(slice_h)

## 多次元配列を用いた計算 ##
# 同じ形 (3 x 3) の行列を 2 つ定義する
x = np.array([
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8]
])

y = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
])

# 足し算
z = x + y
print(z)
# [[ 1  3  5]
#  [ 7  9 11]
#  [13 15 17]]

# 引き算
z = x - y
print(z)
# [[-1 -1 -1]
#  [-1 -1 -1]
#  [-1 -1 -1]]

# 掛け算
z = x * y
print(z)
# [[ 0  2  6]
#  [12 20 30]
#  [42 56 72]]

# 割り算
z = x / y
print(z)
# [[0.         0.5        0.66666667]
#  [0.75       0.8        0.83333333]
#  [0.85714286 0.875      0.88888889]]

# 要素ごとに値を n 乗する
n = 2
z = np.power(b, n)  # b ** nでもn乗できる
print(z)
# [[  1   4   9]
#  [ 16  25  36]
#  [ 49  64  81]
#  [100 121 144]]


## ブロードキャスト ##
# 算術演算を異なる形の配列同士で行う場合、NumPy は自動的に小さい方の配列をブロードキャストし、大きい方の配列と形を合わせる。
a = np.array([
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8]
])

b = np.array([1, 2, 3])

c = a + b
print(c)


## 行列積 ##
# 行列の要素ごとの積は * を用いて計算
# 一方、通常の行列同士の積（行列積）の計算は以下のやり方

# 行列 A の定義
A = np.array([
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8]
])

# 行列 B の定義
B = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
])

# 行列積の計算 (1)
C = np.dot(A, B)
print(C)
# [[ 18  21  24]
#  [ 54  66  78]
#  [ 90 111 132]]

# 行列積の計算 (2)
C = A.dot(B)
print(C)
# [[ 18  21  24]
#  [ 54  66  78]
#  [ 90 111 132]]