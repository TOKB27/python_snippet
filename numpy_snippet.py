### 数値計算や行列演算に使われるNumpy ###

import numpy as np

# ベクトル定義
a = np.array([1, 2, 3])

# shape属性
print('Shape:', a.shape)
# Shape: (3,)

# 次元数
print('Rank:', a.ndim)
# Rank: 1

# サイズ（要素数）
print('Size:', a.size)
# Size: 3


# 行列の定義
b = np.array(
    [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9],
     [10, 11, 12]]
)

print('Shape:', b.shape)
print('Rank:', b.ndim)
print('Size:', b.size)
# Shape: (4, 3)
# Rank: 2
# Size: 12


# 形を指定して、要素が全て 1 で埋められた ndarray を作る
c = np.ones((3, 2))
print(c)
# [[1. 1.]
#  [1. 1.]
#  [1. 1.]]

# 形と値を指定して、要素が指定した値で埋められた ndarray を作る
d = np.full((3, 2), 7)
print(d)
# [[7 7]
#  [7 7]
#  [7 7]]

# 指定された大きさの単位行列を表す ndarray を作る
e = np.eye(5)
print(e)
# [[1. 0. 0. 0. 0.]
#  [0. 1. 0. 0. 0.]
#  [0. 0. 1. 0. 0.]
#  [0. 0. 0. 1. 0.]
#  [0. 0. 0. 0. 1.]]

# 形を指定して、 0 ~ 1 の間の乱数で要素を埋めた ndarray を作る
f = np.random.random((3, 4))
print(f)
# [[0.82170515 0.66039148 0.336626   0.20265204]
#  [0.33051185 0.99460445 0.95882645 0.39158158]
#  [0.36289287 0.94868407 0.19453077 0.67940572]]

# 3 から始まり 6 になるまで 1 ずつ増加する数列を作る（6 は含まない）
g = np.arange(3, 6, 1)
print(g)
# [3 4 5]

# 要素の取り出し
h = np.array(
    [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]
)

val = h[0, 1]  # 1行2列目の値を取り出す
print(val)
# 2